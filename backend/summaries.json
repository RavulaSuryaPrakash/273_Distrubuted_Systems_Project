{"04e76f55-6a8f-42fa-a99c-5d1b58d92a1a": {"summary": "Mohan Kancherla is a Master of Science in Computer Software Engineering student at San Jose State University, with expertise in various programming languages, libraries, frameworks, and tools. He has professional experience as a Software Development Engineer at NatWest Group, where he optimized a chatbot's client codebase, implemented Redis for caching, and engineered a multi-channel chat support solution. In his internship at VIDRONA, he developed a dashboard using ReactJS and an alert system using Firebase Cloud Messaging.\n\nKey points:\n1. Mohan's technical skills include proficiency in languages like Java and Python, libraries like React and Redux, and frameworks like Angular and Spring Boot.\n2. In his professional experience, Mohan demonstrated his ability to optimize systems, enhance user satisfaction, and automate processes, showcasing his expertise in software development and engineering.", "key_points": [], "original_text": "MOHAN KANCHERLA\n/githubGithub |/linkedinLinkedIn |/gl\u2322bePortifolio |/envel\u2322peEmail |\u2642\u00b6obile+1 (669)-325-7754\nEDUCATION\nMaster of Science in Computer Software Engineering San Jose, CA\nSan Jose State University, United States of America Aug 2024 - May 2026\nCoursework: Enterprise Software Platforms, Software Systems Engineering, Data Structures & Algorithms\nTECHNICAL SKILLS\nLanguages: Java, Python, Javascript, Typescript, Node.js, HTML, CSS, Sass\nLibraries: React, Redux, Webpack, jQuery, Tailwind, Tyk Gateway, CI/CD, Rabbit MQ, Socket.io and MQTT\nFrameworks: Angular, Spring Boot, Material-UI, Elastic Search, SASS/SCSS, Swagger, AWS CDK, REST API.\nSoftware: Postman, Chrome DevTools, Jira, Nginx, Figma, Visual Studio Code, TCP/IP.\nDatabases & Tools: SQL, NoSQL, Redis, Docker, PCF, Jenkins, Git, GitLab, Agile model.\nEXPERIENCE\nNatWest Group\nSoftware Development Engineer (SDE 1) July 2022 - July 2024\n\u2022Engineered and optimized the in-house chatbot\u2019s clientcodebase in React, incorporating 5+features, including\nenhanced accessibility , significantly improving UI/UX and boosting user engagement.\n\u2022UtilizedRedisfor caching SQLquery results, and implemented RabbitMQ for message queuing. This efficient\ndistribution of data processing led to a 40%reduction in response times under high loads.\n\u2022Spearheaded the engineering of multi-channel chat support solution for 3 banking platforms , boosting user\nsatisfaction by 40%and reducing manual chat closures by 25%through automated processes\n\u2022Developed a Reactcomponent toolkitwith over 30customizable options, facilitating the product owners and\ndevelopers to autonomously create diverse projects, reducing developer involvement and time by 90%\n\u2022Swiftlyresolved Redisstandby mode during high traffic by implementing rate limiting for API calls using the\nleaky bucket algorithm , ensuring CPU consumption remained below 70%and enhancing system stability.\n\u2022Built a scaffolding CLIthat automates the generation of 200+dailytest packs summary for the web services\ninto a daily test results dashboard, saving over 4 hours per day for testing team.\nSkills: SOA, React, Node.js, Spring Boot, AWS, Redis, RabbitMQ, GitLab, Jenkins, CI/CD, Agile.\nVIDRONA Didcot, Oxfordshire (Remote)\nSoftware Engineer Intern September 2021 - March 2022\n\u2022Developed an intuitive dashboard using ReactJS to provide insights for assets system condition and improved\nstate management efficiency of 30%by integrating Reduxand thereact-query caching .\n\u2022Implemented a real-time alert system using Firebase Cloud Messaging to notify operators of abnormalities,\nenhancing response time and operational efficiency by 40%.\n\u2022Engineered a secure messaging widget using Socket.io ,Node.js , andJWTauthentication, facilitating seamless\ninteraction between field operatives and executives, enhancing communication efficiency by 50%\nSkills: Client/Server, React, Spring Boot, Bash, FireBase, Socket.io, Node.js, JWT, Git, React.js,.\nPROJECTS\nLoanTracker - Visualise and plan EMIs |SpringBoot & Angular (GitHub)\n\u2022Designed a scalable, user-centric loan re-payment web application utilizing Angular, emphasizing EMI cycles\nandpre closure loan planner. Built Spring-Boot microservices with Netflix Eureka andOauth\nPRODO (Online shopping platform for perfumes) | Spring, SQL, React.js, Docker, AWS (GitHub)\n\u2022Created an e-commerce platform to sell perfumes, with an integrated payment gateway using PayPal and Google\nOAuth for easier login and reduced server response time by 50 mssecure sign-ups.\n\u2022Deployed the Application in an Autoscaled EC2instance with Load Balancers .\nEmployee Management System Spring & Angular (GitHub)\n\u2022Leveraged Angular to develop a web application for managers and employees, streamlining HR task management.\nUtilized the Springframework JPAfor efficient data retrieval and manipulation, integrating JWTauthentication.\nCERTIFICATIONS\n\u2022Hackathons: Secured 3rd position at NatWest Challenge 23 || Awarded \u2019Business Acumen\u2019 and \u2019Innovation\u2019 honors\nin NatWest Challenge 22 Hackathon.\n\u2022Awards: : Living our values at Natwest\n\u2022Certifications: Java ,Problem-solving-java", "processing_time": 1733619184.775148, "status": "completed", "requested_words": 200, "requested_paragraphs": 2, "actual_word_count": 128, "actual_paragraphs": 0, "created_at": "2024-12-07T16:53:04.775148"}, "05aab8a8-590f-4cb0-99c8-17b8440ac4a3": {"summary": "The Distributed Document Summarization and Knowledge Extraction system designed by Team Beta2 consists of various key components organized in a high-level architecture. The system includes a Client Layer with a Web Interface, Mobile App, and Admin Dashboard for user interactions. An API Gateway manages incoming requests and authentication, while Application Services handle document processing, summarization requests, user management, and administrative functions. The system also features a Processing Layer with components like Document Parser, Extractive Summarizer, Abstractive Summarizer, and Knowledge Extractor. Data is stored in the Storage Layer, including original documents, user information, generated summaries, and temporary cache. Security measures such as data encryption, OAuth2/JWT authentication, and regular security audits are implemented to ensure data protection.", "key_points": ["1. The system architecture emphasizes scalability through containerization and load balancing while maintaining high performance and security standards with features like encryption for data in transit and at rest, OAuth2/JWT authentication, and regular security audits.", "2. Proper state management and feedback mechanisms are incorporated into the system to meet both functional and non-functional requirements, ensuring efficient processing and user interaction throughout the document summarization and knowledge extraction process."], "original_text": "Distributed Document Summarization and Knowledge Extraction  \nTeam: Beta2  \nSurya Prakash Ravula \nSindhura Purnima Vempati  \nSvwaroopananda Kashyap  \n Kumarasubrahmanya Hosamane  \n \nHigh Level Architecture Design:  \nHere is High-Level Architecture Design diagram for the Distributed Document \nSummarization system.  \n \n \n \n \n \nData Flow Diagram : \n \n \n \n \n \n \n \n \n \n \nComponent Level Design: \n \nKey Components:  \nClient Layer  \n\u2022 Web Interface: Handles document uploads and displays summaries  \n\u2022 Mobile App: Provides mobile access to system features  \n\u2022 Admin Dashboard: System monitoring and management interface  \nAPI Gateway  \n\u2022 Load Balancer: Distributes incoming requests  \n\u2022 Authentication: Handles user authentication and authorization  \n\u2022 Rate Limiter: Controls request frequency  \nApplication Services  \n\u2022 Document Service: Manages document processing and storage  \n\u2022 Summarization Service: Handles document summarization requests  \n\u2022 User Management Service: Handles user operations and profiles  \n\u2022 Admin Service: Provides administrative functionalities  \nProcessing Layer  \n\u2022 Document Parser: Processes various document formats (PDF, DOCX, TXT)  \n\u2022 Extractive Summarizer: Generates extractive summaries  \n\u2022 Abstractive Summarizer: Generates abstractive summaries  \n\u2022 Knowledge Extractor: Extracts key points from documents  \nStorage Layer  \n\u2022 Document Store: Stores original documents  \n\u2022 User Database: Stores user information and preferences  \n\u2022 Cache: Temporary storage for frequent requests  \n\u2022 Summary Store: Stores generated summaries  \nSecurity Features  \n\u2022 Encryption for data in transit (HTTPS)  \n\u2022 Data encryption at rest (AES)  \n\u2022 OAuth2/JWT authentication  \n\u2022 Regular security audits  \nThis architecture ensures scalability through containerization and load balancing, while \nmaintaining high performance and security standards as specified in the requirements . \n \n \n \n Sequence Diagram: \n \n \nThe system maintains proper state management and provides feedback throughout the \nprocess, meeting both functional and non -functional requirements  \n", "processing_time": 1733619264.6429827, "status": "completed", "requested_words": 300, "requested_paragraphs": 2, "actual_word_count": 115, "actual_paragraphs": 2, "created_at": "2024-12-07T16:54:24.644847"}, "d185afcd-2a1d-437d-80c2-68e1e300d960": {"summary": "The provided text appears to be related to a take-home assignment for a Quiz2, involving the creation of a Use Case Diagram and an Activity Diagram. The text is incomplete and lacks detailed information, but it seems to be structured as a list of tasks or requirements for the assignment. \n\n**", "key_points": ["**", "", "1. The assignment involves creating a Use Case Diagram: A Use Case Diagram is a visual representation of the interactions between users (actors) and a system. It typically shows the various use cases or scenarios of how users interact with the system to achieve specific goals or tasks.", "", "2. The assignment also includes creating an Activity Diagram: An Activity Diagram is used to model the flow of activities or actions within a system. It shows the sequence of activities, decision points, and branching logic in a process. Activity diagrams are commonly used in software engineering to represent the workflow of a system or algorithm.", "", "In summary, the text outlines the tasks related to creating a Use Case Diagram and an Activity Diagram for the Quiz2 take-home assignment. These diagrams are essential tools in software engineering for understanding and visualizing the interactions and processes within a system."], "original_text": "Quiz2 - Take Home Assignment  \nSurya Prakash  Ravula - 018187195  \n1. Use Case Diagram : \n \n \n \n2. Activity diagram : \n \n \n", "processing_time": 1733619661.241219, "status": "completed", "requested_words": 300, "requested_paragraphs": 2, "actual_word_count": 51, "actual_paragraphs": 7, "created_at": "2024-12-07T17:01:01.243219"}, "bbc65391-acd8-4aaf-98f6-5da7e2612a09": {"summary": "Mohan Kancherla is a Master of Science in Computer Software Engineering student at San Jose State University with expertise in a variety of programming languages, frameworks, libraries, and tools. He has worked as a Software Development Engineer at NatWest Group, where he optimized a chatbot client codebase, implemented caching and message queuing techniques, and developed a multi-channel chat support solution. In addition, he spearheaded the engineering of a React component toolkit and implemented solutions for system stability and test automation.\n\nKey points:\n1. Mohan's experience at NatWest Group showcases his skills in software engineering, including optimizing codebases, implementing efficient data processing techniques, and developing solutions to enhance user satisfaction and operational efficiency.\n2. Mohan's technical skills cover a wide range of languages, frameworks, libraries, and tools, demonstrating his versatility and proficiency in various aspects of software development, from frontend to backend technologies.", "key_points": [], "original_text": "MOHAN KANCHERLA\n/githubGithub |/linkedinLinkedIn |/gl\u2322bePortifolio |/envel\u2322peEmail |\u2642\u00b6obile+1 (669)-325-7754\nEDUCATION\nMaster of Science in Computer Software Engineering San Jose, CA\nSan Jose State University, United States of America Aug 2024 - May 2026\nCoursework: Enterprise Software Platforms, Software Systems Engineering, Data Structures & Algorithms\nTECHNICAL SKILLS\nLanguages: Java, Python, Javascript, Typescript, Node.js, HTML, CSS, Sass\nLibraries: React, Redux, Webpack, jQuery, Tailwind, Tyk Gateway, CI/CD, Rabbit MQ, Socket.io and MQTT\nFrameworks: Angular, Spring Boot, Material-UI, Elastic Search, SASS/SCSS, Swagger, AWS CDK, REST API.\nSoftware: Postman, Chrome DevTools, Jira, Nginx, Figma, Visual Studio Code, TCP/IP.\nDatabases & Tools: SQL, NoSQL, Redis, Docker, PCF, Jenkins, Git, GitLab, Agile model.\nEXPERIENCE\nNatWest Group\nSoftware Development Engineer (SDE 1) July 2022 - July 2024\n\u2022Engineered and optimized the in-house chatbot\u2019s clientcodebase in React, incorporating 5+features, including\nenhanced accessibility , significantly improving UI/UX and boosting user engagement.\n\u2022UtilizedRedisfor caching SQLquery results, and implemented RabbitMQ for message queuing. This efficient\ndistribution of data processing led to a 40%reduction in response times under high loads.\n\u2022Spearheaded the engineering of multi-channel chat support solution for 3 banking platforms , boosting user\nsatisfaction by 40%and reducing manual chat closures by 25%through automated processes\n\u2022Developed a Reactcomponent toolkitwith over 30customizable options, facilitating the product owners and\ndevelopers to autonomously create diverse projects, reducing developer involvement and time by 90%\n\u2022Swiftlyresolved Redisstandby mode during high traffic by implementing rate limiting for API calls using the\nleaky bucket algorithm , ensuring CPU consumption remained below 70%and enhancing system stability.\n\u2022Built a scaffolding CLIthat automates the generation of 200+dailytest packs summary for the web services\ninto a daily test results dashboard, saving over 4 hours per day for testing team.\nSkills: SOA, React, Node.js, Spring Boot, AWS, Redis, RabbitMQ, GitLab, Jenkins, CI/CD, Agile.\nVIDRONA Didcot, Oxfordshire (Remote)\nSoftware Engineer Intern September 2021 - March 2022\n\u2022Developed an intuitive dashboard using ReactJS to provide insights for assets system condition and improved\nstate management efficiency of 30%by integrating Reduxand thereact-query caching .\n\u2022Implemented a real-time alert system using Firebase Cloud Messaging to notify operators of abnormalities,\nenhancing response time and operational efficiency by 40%.\n\u2022Engineered a secure messaging widget using Socket.io ,Node.js , andJWTauthentication, facilitating seamless\ninteraction between field operatives and executives, enhancing communication efficiency by 50%\nSkills: Client/Server, React, Spring Boot, Bash, FireBase, Socket.io, Node.js, JWT, Git, React.js,.\nPROJECTS\nLoanTracker - Visualise and plan EMIs |SpringBoot & Angular (GitHub)\n\u2022Designed a scalable, user-centric loan re-payment web application utilizing Angular, emphasizing EMI cycles\nandpre closure loan planner. Built Spring-Boot microservices with Netflix Eureka andOauth\nPRODO (Online shopping platform for perfumes) | Spring, SQL, React.js, Docker, AWS (GitHub)\n\u2022Created an e-commerce platform to sell perfumes, with an integrated payment gateway using PayPal and Google\nOAuth for easier login and reduced server response time by 50 mssecure sign-ups.\n\u2022Deployed the Application in an Autoscaled EC2instance with Load Balancers .\nEmployee Management System Spring & Angular (GitHub)\n\u2022Leveraged Angular to develop a web application for managers and employees, streamlining HR task management.\nUtilized the Springframework JPAfor efficient data retrieval and manipulation, integrating JWTauthentication.\nCERTIFICATIONS\n\u2022Hackathons: Secured 3rd position at NatWest Challenge 23 || Awarded \u2019Business Acumen\u2019 and \u2019Innovation\u2019 honors\nin NatWest Challenge 22 Hackathon.\n\u2022Awards: : Living our values at Natwest\n\u2022Certifications: Java ,Problem-solving-java", "processing_time": 1733622041.7675636, "status": "completed", "requested_words": 200, "requested_paragraphs": 2, "actual_word_count": 142, "actual_paragraphs": 0, "created_at": "2024-12-07T17:40:41.770569"}, "9e463f52-bc06-48a3-af74-4004d0dd52a6": {"summary": "The final exam review session will be held from 5:15 pm to 7:45 pm, lasting 2 hours and 30 minutes, with a total of 125 points. Students are required to bring two sheets (4 pages) of notes in addition to their Midterm notes. The session will cover identifying code smells such as Long Method, Large Class, Long parameter list, Primitive Obsession, Switch statements, and Duplicate code. Students will need to recommend refactoring techniques and rewrite provided code segments to resolve the identified code smells.\n\nKey points:\n1. The final exam review will focus on identifying code smells and applying refactoring techniques to improve code quality.\n2. Design patterns such as Abstract Factory, Factory method, Builder, Adapter, Facade, Mediator, Memento, Chain of responsibility, and Template method will also be covered, emphasizing the reasoning behind the choice of patterns for designing classes in specific use cases.", "key_points": [], "original_text": "Final exam review: 515pm to 745pm \r\n(2h:30min)\r\nPoints: 125\r\nBring 2 sheets (4 pages of notes) in addition to your Midterm notes\r\n\r\nCode smells:\r\nLong Method, Large Class, Long parameter list, \r\nPrimitive Obsession\r\nSwitch statements\r\nDuplicate code\r\n \r\nGiven a code segment, identify code smell(s) and \r\nrecommend refactoring technique\r\nRe-write the code to resolve the code smell(s)\r\n\r\nDesign patterns: (for designing classes for a use case, applying a pattern, reasoning for the choice) (also multiple choice)\r\nAbstract Factory\r\nFactory method\r\nBuilder\r\nAdapter\r\nFacade\r\nMediator\r\nMemento\r\nChain of responsibility\r\nTemplate method\r\n\r\nWe will not ask you to draw any diagrams\r\n\r\nMCQ: includes patterns before mid-term in addition to this list\r\nAgile, UML Activity diagrams, Use case diagrams, Sequence diagrams, Deployment diagrams\r\n========================================================\r\n================Code smell examples:\r\nint basePrice = quantity * itemPrice;\r\ndouble seasonDiscount = this.getSeasonalDiscount();\r\ndouble fees = this.getFees();\r\ndouble finalPrice = discountedPrice(basePrice, seasonDiscount, fees);\r\n>>>>>>>>>\r\nint basePrice = quantity * itemPrice;\r\ndouble finalPrice = discountedPrice(basePrice);\r\nDiscountType  dtype = getDiscountType();;\r\n\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n2 parameters moved into the method - \r\nReplace each param with the method call\r\npublic double discountedPrice(double basePrice)\r\n{\r\n\tdouble seasonDiscount = this.getSeasonalDiscount();\r\n\tdouble fees = this.getFees();\r\n \r\n...................\r\n\r\nint low = daysTempRange.getLow();\r\nint high = daysTempRange.getHigh();\r\nboolean withinPlan = plan.withinRange(low, high);\r\n\r\n>>>>>>>>>>>>>\r\nboolean withinPlan = plan.withinRange(daysTempRange);\r\n\r\n}", "processing_time": 1733623605.1593583, "status": "completed", "requested_words": 200, "requested_paragraphs": 2, "actual_word_count": 144, "actual_paragraphs": 0, "created_at": "2024-12-07T18:06:45.162411"}, "33958d27-a053-4385-8b08-7dcb90251566": {"summary": "The Distributed Document Summarization and Knowledge Extraction system, developed by Team Beta2, features a High-Level Architecture Design encompassing various components. The key components include the Client Layer with a Web Interface, Mobile App, and Admin Dashboard, an API Gateway with Load Balancer and Authentication features, Application Services like Document and Summarization Services, Processing Layer with Document Parser and Summarizers, and a Storage Layer with Document and Summary Stores. Security features like encryption, authentication, and regular audits ensure data protection. The system's architecture ensures scalability through containerization and load balancing while maintaining high performance and security standards. The system also includes a Sequence Diagram illustrating proper state management and feedback provision throughout the process, meeting functional and non-functional requirements.", "key_points": ["1. The system architecture includes key components like Client Layer, API Gateway, Application Services, Processing Layer, Storage Layer, and Security Features to support distributed document summarization and knowledge extraction.", "2. Security measures such as data encryption, authentication protocols, and regular security audits are implemented to ensure data protection and system integrity."], "original_text": "Distributed Document Summarization and Knowledge Extraction  \nTeam: Beta2  \nSurya Prakash Ravula \nSindhura Purnima Vempati  \nSvwaroopananda Kashyap  \n Kumarasubrahmanya Hosamane  \n \nHigh Level Architecture Design:  \nHere is High-Level Architecture Design diagram for the Distributed Document \nSummarization system.  \n \n \n \n \n \nData Flow Diagram : \n \n \n \n \n \n \n \n \n \n \nComponent Level Design: \n \nKey Components:  \nClient Layer  \n\u2022 Web Interface: Handles document uploads and displays summaries  \n\u2022 Mobile App: Provides mobile access to system features  \n\u2022 Admin Dashboard: System monitoring and management interface  \nAPI Gateway  \n\u2022 Load Balancer: Distributes incoming requests  \n\u2022 Authentication: Handles user authentication and authorization  \n\u2022 Rate Limiter: Controls request frequency  \nApplication Services  \n\u2022 Document Service: Manages document processing and storage  \n\u2022 Summarization Service: Handles document summarization requests  \n\u2022 User Management Service: Handles user operations and profiles  \n\u2022 Admin Service: Provides administrative functionalities  \nProcessing Layer  \n\u2022 Document Parser: Processes various document formats (PDF, DOCX, TXT)  \n\u2022 Extractive Summarizer: Generates extractive summaries  \n\u2022 Abstractive Summarizer: Generates abstractive summaries  \n\u2022 Knowledge Extractor: Extracts key points from documents  \nStorage Layer  \n\u2022 Document Store: Stores original documents  \n\u2022 User Database: Stores user information and preferences  \n\u2022 Cache: Temporary storage for frequent requests  \n\u2022 Summary Store: Stores generated summaries  \nSecurity Features  \n\u2022 Encryption for data in transit (HTTPS)  \n\u2022 Data encryption at rest (AES)  \n\u2022 OAuth2/JWT authentication  \n\u2022 Regular security audits  \nThis architecture ensures scalability through containerization and load balancing, while \nmaintaining high performance and security standards as specified in the requirements . \n \n \n \n Sequence Diagram: \n \n \nThe system maintains proper state management and provides feedback throughout the \nprocess, meeting both functional and non -functional requirements  \n", "processing_time": 1733624278.379322, "status": "completed", "requested_words": 200, "requested_paragraphs": 2, "actual_word_count": 118, "actual_paragraphs": 2, "created_at": "2024-12-07T18:17:58.389131"}}